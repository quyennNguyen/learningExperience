/*
SOURCE: https://youtu.be/_a5j7KoflTs

WHAT IS SASS?
    SASS, stands for Syntactically Awesome Stylesheet, is an extention to CSS and the preprocessor of CSS, which reduces repetition of CSS.
    The Web browser doesn't understand SASS code; therefore, SASS code needs a preprocessor to convert into standard CSS. The transpiling program is called transpiler.
    There are two types of syntaxes supported by SASS:
        1. SCSS:
        SCSS syntax is as valid as CSS's syntax and has extended features which don't exist in CSS such as variables, nesting, mixins, imports, inheritance, functions,...
        File extension: .scss
        2. Indented:
        Indented syntax is SASS's original syntax.
        Instead of using braces and semi-colons, Indented syntax uses indentations.
        File extension: .sass
    For naming purposes, in SASS, hyphen "-" and underscore "_" are considered the same.

HOW TO WRITE DRY (DON'T REPEAT YOURSELF) CODE?
    Keep related code in separate files.
    Create small files with CSS snippets to include in other SASS files.

WHAT ARE SASS VARIABLES?
    A variable is a storage that contains information/data/value, which can be used/manipulated later.
    Each variable has an associated name and memory location.
    SASS variable is used to store values that might be used repeatedly throughout the Web page.
        $variableName: value;
        selector {
            property: $variableName;
        }
    SASS variable scope:
        By default, a variable is only available at the level of nesting where it is defined; in other word, depending on where a variable is defined and nested, it can be executed differently.
        EX:
            $variableName: value1;
            selector1 {
                property1: $variableName;
            }
            selector2 {
                property2: $variableName;
            }
        EX:
            $variableName: value1;
            selector1 {
                $variableName: value2;
                property1: $variableName;
            }
            selector2 {
                property2: $variableName;
            }
        To make a variable accessible on all levels of nesting (global scope), add "!global" switch to the variable declaration:
            $variableName: value !global;

WHAT ARE SASS NESTED RULES AND PROPERTIES?
    In standard CSS, the nesting rules are defined one by one.
        selector1 selector2 {
            property2: value2;
        }
        selector1 selector3 {
            property3: value3;
        }
        selector1 selector4 {
            property4: value4;
        }
    SASS allows CSS selectors to be nested.   
        selector1 {
            selector2 {
                property2: value2;
            }
            selector3 {
                property3: value3;
            }
            selector4 {
                property4: value4;
            }
        }
    Some CSS properties have the same prefix such as background-, font-, text-,...
    SASS also allows CSS properties with the same prefix to be nested.
        selector {
            prefix: {
                property1: value1;
                property2: value2;
                property3: value3;
            }
        }

WHAT ARE SASS DIRECTIVES?
    1. @import:
    The "@import" directive is used to include the content of one file in another.
        @import "fileName";
    SIDE NOTE:
                The file extension of the imported file doesn't need to be specified.
    The directive imports the file, and all content defined in the imported file can be used in the importing file.
    SIDE NOTE:
                Related/Repeated code should be defined in a separate file, so as to be imported when needed, to reduce repetition.
    2. @mixin:
    The "@mixin" directive is used to hold properties and values that might be used repeatedly throughout the Web page, which is defined as a mixin.
        @mixin mixin-name {
            property: value;
        }
    A mixin accepts arguments, so that variables can be passed to it.
        @mixin mixin-name($variableName1, $variableName2) {
            property1: $variableName1;
            property2: $variableName2;
        }
    3. @include:
    The "@include" directive is used to include the mixin.
        selector {
            @include mixin-name;
        }
    To include a mixin with arguments,
        selector {
            @include mixin-name(value1, value2);
        }
    4. SPECIAL CASES of @mixin and @include:
        a. Case 1:
        From a standard mixin with default values:
            @mixin mixin-name {
                property1: value1;
                property2: value2;
            }
        What if you want to change one of its default values?
        Let's rewrite the original mixin:
            @mixin mixin-name($variableName1: value1, $variableName2: value2) {
                property1: $variableName1;
                property2: $variableName2;
            }
        To change one of its value, EX: value1,:
            selector {
                @include mixin-name($variableName1: value3);
            }
        b. Case 2:
        One mixin can include other mixins.
            @mixin mixin-name1 {
                @include mixin-name2;
                @include mixin-name3;
                @include mixin-name4;
            }
            selector {
                @include mixin-name1;
            }
    5. @extend:
    The "@extend" directive allows another selector inherit a set of properties and values from one selector. The child selector can extend the style declaration of the parent selector.
        parent-selector {
            property1: value1;
        }
        child-selector {
            @extend parent-selector;
            property2: value2;
        }

WHAT ARE SASS PARTIALS?
    By default, SASS transpiles all .scss files directly to .css files.
    However, all .scss files, except for the main.scss file, don't need to be transpiled.
    An SASS partial is a file named with a leading underscore "_", which informs SASS to not transpile it.
        _fileName.scss
    If the partial file is imported, the leading underscore "_" is omitted.
        @import "fileName";

WHAT ARE SASS FUNCTIONS?
    1. Color:
    The color functions are used to:
        set colors
        get colors
        manipulate colors
    Full list of SASS colors functions: https://www.w3schools.com/sass/sass_functions_color.php
    2. String:
    The string functions are used to manipulate strings.
    SASS strings are 1-based, which means they start at index 1.
    Full list of SASS string functions: https://www.w3schools.com/sass/sass_functions_string.php
    3. Numeric:
    The numeric functions are used to manipulate numeric values.
    Full list of SASS numeric functions: https://www.w3schools.com/sass/sass_functions_numeric.php
    4. List:
    The list functions are used to manipulate values in a list or among lists.
    SASS lists are immutable, which means they don't change. If the list function returns a new list, the original list won't change.
    SASS lists are 1-based, which means the items in a list start at index 1.
    Full list of SASS list functions: https://www.w3schools.com/sass/sass_functions_list.php
    5. Map:
    Map is a list of one or more key-value pairs, where each value is set to its associated key.
        $mapName: (
            "keyName1": value1,
            "keyName2": value2
        );
    The map functions are used to get information from the map.
        selector {
            property: mapFunction($mapName, keyName);
        }
    SASS maps are immutable, which means they don't change. If the map function returns a new map, the original map doesn't change.
    Full list of SASS map functions: https://www.w3schools.com/sass/sass_functions_map.php
    6. Selector:
    The selector functions are used to manipulate selectors.
    Full list of SASS selector functions: https://www.w3schools.com/sass/sass_functions_selector.php
    7. Introspection:
    The introspection functions are used to find errors, like debugging functions.
    Full list of SASS introspection functions: https://www.w3schools.com/sass/sass_functions_introspection.php
*/
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  background: #000;
  color: #fff;
}

div {
  margin: 0 auto;
  padding: 20px;
  width: 80%;
  background: gray;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: row;
}
@media (max-width: 1000px) {
  div {
    flex-direction: column;
  }
}
div .para1, div .para2 {
  font-weight: 800;
  font-weight: 800;
}
div .para1:hover, div .para2:hover {
  color: yellow;
}
div .para2:hover {
  color: rgb(238, 164, 238);
}/*# sourceMappingURL=style.css.map */