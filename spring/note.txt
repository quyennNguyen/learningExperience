WHAT IS SPRING?
  Spring is an open-source Java framework that provides a comprehensive set of features for building enterprise-grade Java applications.
  It is a light-weight alternative to Java Enterprise Edition (JavaEE) that focuses on simplicity, modularity, and extensibility.
  
HOW TO SET UP A SPRING PROJECT?
  1. Use Spring Initializr to set up the project.
  2. Add base dependencies: Spring Web, Spring Data JPA, Spring Boot Dev Tools, MySQL Driver
  3. Configure "application.properties" file with database settings:
      spring.jpa.hibernate.ddl-auto=create-drop
      spring.datasource.url=jdbc:mysql://localhost:3306/name_db
      spring.datasource.username=root
      spring.datasource.password=password
      spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
      spring.jpa.database-platform= org.hibernate.dialect.MySQLDialect
      spring.jpa.show-sql: true
  4. In "pom.xml" file, check if you have all necessary dependencies:
      <dependencies>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-devtools</artifactId>
          <scope>runtime</scope>
          <optional>true</optional>
        </dependency>
        <dependency>
          <groupId>com.mysql</groupId>
          <artifactId>mysql-connector-j</artifactId>
          <scope>runtime</scope>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-test</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
          <groupId>io.jsonwebtoken</groupId>
          <artifactId>jjwt-api</artifactId>
          <version>0.11.5</version>
        </dependency>
        <dependency>
          <groupId>io.jsonwebtoken</groupId>
          <artifactId>jjwt-impl</artifactId>
          <version>0.11.5</version>
          <scope>runtime</scope>
        </dependency>
        <dependency>
          <groupId>io.jsonwebtoken</groupId>
          <artifactId>jjwt-jackson</artifactId> <!-- or jjwt-gson if Gson is preferred -->
          <version>0.11.5</version>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
  5. A typical Spring Boot application should consist of the following directories: entity, repository, service, controller, exception, security, jwt.

WHAT IS ORM?
  ORM, stands for Object Relational Mapping, is a connection between object-oriented programming language (OOP) and relational database management system (RDBMS).
  JPA, stands for Java Persistence API, is a standard for creating an ORM.
  There are 2 common ORM types: JDBC and Hibernate.
  
WHAT IS HIBERNATE?
  When using Hibernate, there are 3 rules to follow:
    Keyword @Entity
    Unique IDs:
      There are 4 ways to create IDs:
        AUTO: allows database to vendor your IDs
        IDENTITY: increments the IDs
        SEQUENCE: you have to type what type of sequence you want to use (this is good for PostgreSQL)
        TABLE: this will create a separate table for your IDs aside the table of your entity
    Default constructor
