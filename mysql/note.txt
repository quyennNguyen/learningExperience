WHAT IS DATABASE?
    Database is a collection of data stored in format that can be accessed, managed, and updated.
    DBMS, stands for Database Management System, serves as an interface between the end-user (back-end) and the database, and allows the user to create, read, update, and delete the data in the database.
    There are 2 types of DBMS used to store, retrieve, and manage data:
        1. Relational Database (RDBMS):
            a. Data Model:
                This stores data in a relational data model that uses tables.
                This is based on a fixed schema to define the tables and their relationaships.
                Each table is made of rows and columns.
                Each row represents a single record with unique key/id.
                Each column represents a particular attribute of the record.
            b. Scalability:
                This is less scalable, and may require more complex scaling strategies.
            c. Consistency:
                This is highly structured and provides a strong consistency.
                Data is always in a consistent state.
            d. Querying:
                This uses SQL to query data.
            e. Application:
                This is well-suited for applications that require complex queries and support transactions such as financial or e-commerce systems.
            EX: MySQL, PostgreSQL, Microsoft SQL Server, MariaDB, Oracle,...
        2. NoSQL Database:
            a. Data Model:
                This stores data in a variety of data models including key-value pairs, documents, or graphs.
                This is not based on a fixed schema (schemaless).
            b. Scalability:
                This is highly scalable and flexible, and can handle a large amount of data and traffics.
            c. Consistency:
                This sacrifices consistency in favor of scalability and performance.
            d. Querying:
                This often uses its own query language or APIs.
            e. Application:
                This is often used for large-scale web applications such as social media platforms, where data is highly distributed and the schema may evolve rapidly.
            EX: MongoDB, Firebase, Redis, Cassandra,...

WHAT IS SQL AND MYSQL?
    SQL, stands for Structured Query Language, is a programming language used to perform all types of data operations in RDBMS such as write and query data, communicate with data,... 
    SQL is not case-sensitive.
    MySQL is a type of RDMS that provides a managing user interface for operating data in a database. 
    To start MySQL from Ubuntu: mysql -h 127.0.0.1 -p -u root -p
    I. DATA TYPES:
        When creating a table in a database, each column in the table is required to have a name and a data type.
        The data types let the SQL know what type of value will be stored in the columns.
        1. Character/String:
            CHAR
            VARCHAR
            TEXT
        2. Numeric:
            BIT
            TINYINT
            SMALLINT
            INT
            BIGINT
            DECIMAL
            NUMERIC
            FLOAT
            REAL
        3. Date/Time:
            DATE
            TIME
            DATETIME
            TIMESTAMP
            YEAR
        4. Binary:
            BINARY
            VARBINARY
            IMAGE
        5. Miscellaneous:
            CLOB
            BLOB
            XML
            JSON
    II. FUNCTIONS:
        1. Data Definition Language (DDL):
            This defines and deals with database schemas and descriptions of how data should exist in the database.
            DROP
            RENAME
            CREATE
            ALTER
            TRUNCATE
        2. Data Manipulation Language (DML):
            This deals with data manipulation such as storing, retrieving, updating, and deleting data in the database.
            SELECT
            INSERT
            UPDATE
            DELETE
            NOTE: SELECT is used to retrieve data from a table. The data returned is stored in a result table called ResultSet.
        3. (DCL):
            GRANT / REVOKE
        4. (TCL):
            COMMIT / ROLLBACK
        5. Aggregate Functions:
            COUNT
            MAX
            MIN
            SUM
            AVG
    III. OPERATORS:
        There are used in WHERE clause.
        = > < >= <= != <> 
        BETWEEN LIKE IN
        AND OR NOT
    IV. SQL ALIAS:
        Alias is a shorthand for a table or a column name.
        Using aliases reduces the amount of typing required to enter a query and makes complex queries easier to read.
        It is useful with JOINs and aggregate functions.
        It only exists for the duration of the query.
    IV. COMMON COMMANDS:
        1. For Databases:
            SHOW DATABASES;
            CREATE DATABASE dbname_db;
            USE dbname_db;
        2. For Tables:
            SHOW TABLES;
            CREATE TABLE tbname(name datatype pairs separated by commas); 
            CREATE TABLE tbname(columnname1 DATATYPE, columnname2 DATATYPE, columnname3 DATATYPE);
            DESCRIBE tbname;
            ALTER TABLE tbname RENAME TABLE oldname TO newname;
            DROP TABLE tbname;
        3. For Records:
            SELECT specific columns separated by commas FROM tbname WHERE (multiple conditions separated by AND/OR);
            SELECT * FROM tbname;
            SELECT DISTINT what FROM tbname;
            SELECT what FROM tbname ORDER by what; (ascending order)
            SELECT what FROM tbname ORDER by what DESC; (descending order)
            SELECT what FROM tbname WHERE condition;
            SELECT what FROM tbname WHERE what IN( … );
            SELECT what FROM tbname WHERE what BETWEEN what AND what;
            SELECT what FROM tbname WHERE what LIKE ‘pattern’; (EX: ‘%A%’)
            SELECT what FROM tbname WHERE what LIMIT howmuch;
            INSERT INTO tbname VALUES(values for each column separated by commas);
            INSERT INTO tbname(specific columns separated by commas) VALUES(values for each column separated by commas);
            UPDATE tbname SET what=newvalue WHERE condition;
            DELETE FROM tbname WHERE condition;
            GROUP BY
            HAVING
        4. For Columns:
            ALTER TABLE tbname ADD what datatype;
            ALTER TABLE tbname MODIFY what newdatatype;
            ALTER TABLE tbname CHANGE oldname newname datatype;
            ALTER TABLE tbname RENAME COLUMN oldname TO newname;
            ALTER TABLE tbname DROP what;

WHAT IS AN API?
    API, stands for Application Programming Interface, is a set of rules, protocols, and conventions that define how software components interact with each other.
    It provides a standardized way for different software components or systems to communicate and exchange data, to work together seamlessly.

WHAT IS JDBC?
    JDBC, stands for Java Database Connectivity, is a Java API that provides the standard mechanism for Java applications to interact with relational databases.
    It allows you to build database-driven aplications, where you can establish connections to the databases, execute SQL statements, store, retrieve, and manipulate data dynamically, and manage database transactions within Java code.
    It follows a client-server architecture where Java applications act as clients communicating with the database server to perform database operations.
    It provides a set of interfaces and classes that defines the necessary methods to interact with the databases.
    I. Drivers:
        JDBC drivers are software components that allow Java applications to interact with different databases as to establish connections, execute SQL statements, retrieve and manipulate data, and manage transactions in databases.
        There are different types of JDBC drivers:
            1. JDBC-ODBC Bridge Driver
            2. Native-API Driver
            3. Network Protocol Driver
            4. JDBC Driver for Database Middleware
            5. JDBC Driver for Database Server
        JDBC drivers are usually provided by the database vendor and need to be included in your project's classpath.
        To add JDBC Driver to a Java application from IntelliJ:
            1. File
            2. Project Structure
            3. Project Settings
            4. Modules
            5. Dependencies
            6. Add JARS or Directories
            7. Attach Files and Directories
            8. Look for mysql-connector-j-8.0.33.jar
    II. Connection:
        1. Load the JDBC Driver:
            import java.sql.SQLException;
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
            } catch (ClassNotFoundException e) {
                throw new RuntimeException(e);
            }
        2. Establish the connection with the database:
            import java.sql.Connection;
            import java.sql.DriverManager;
            String URL = "jdbc:mysql://localhost:xxxx/nameOfYourDatabase_db";
            String USERNAME = "yourDatabaseUsername";
            String PASSWORD = "yourDatabasePassword";
            try {
                Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        3. Create statements, execute SQL queries, and handle results:
            import java.sql.Statement;
            import java.sql.ResultSet;
            try {
                Statement statement = connection.createStatement();
                PreparedStatement statement = connection.prepareStatement("SQL command");

                statement.executeQuery("SQL commands"); // for SELECT queries
                statement.executeUpdate(); // for INSERT, UPDATE, DELETE queries

                There are 3 types of Statement interfaces in JDBC:
                    - Statement (grandparent)
                    - PreapredStatement (parent)
                    - CallableStatement (child)

                ResultSet result = statement.executeQuery("SQL command"); // the results returned from the executeQuery() methods are objects of type ResultSet.                       
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }       
        4. Close database resources:
            result.close();
            statement.close();
            connection.close();
            This is to free up system resources and avoid potential memory leaks.
    III. Batch Update:
        This refers to a feature that allows you to execute multiple SQL statements as a batch in a single round-trip to the database, instead of executing them one by one.
        This can improve performance and reduce the overhead of database communication.
        to create SQL statements:
            statement.addBatch("SQL command");
        to execute the SQL statements:
            int[] updateCounts = statement.executeBatch(); // this returns an array of update counts, which represent the number of rows affected by each statement.
        to clear the batch and restart with new SQL statements:
            clearBatch();
What is SQL injection attack? 
What is schema?
What is query?
